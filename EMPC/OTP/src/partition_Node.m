function [midpoint leftNode rightNode rootpath_right rootpath_left] = partition_Node(rootpath, node)
% Create a node structure with the current parameter space,
% the dimension of the last split, a placeholder for value array,
% and a termination flag
rootpath_right = [rootpath '.rightChild'];
rootpath_left = [rootpath '.leftChild'];
% Determine the next dimension to split
currentDim = node.SplitDimension;


% Calculate the midpoint in the next dimension
midpoint = (node.paramSpace(currentDim, 1) + node.paramSpace(currentDim, 2)) / 2;

% Create left and right parameter spaces
leftSpace = node.paramSpace;
rightSpace = node.paramSpace;
leftSpace(currentDim, 2) = midpoint;
rightSpace(currentDim, 1) = midpoint;

leftNode = struct(...
    'paramSpace', leftSpace, ...
    'SplitDimension', NaN, ...
    'midpoint', NaN, ...
    'K0', [], ...
    'h0', [],...
    'Message',[],...
    'epsilon',[],...
    'terminationFlag', false, ...
    'feasibility',0,...
    'leftChild', [], ...
    'rightChild', []);
rightNode = struct(...
    'paramSpace', rightSpace, ...
    'SplitDimension', NaN, ...
    'midpoint', NaN, ...
    'K0', [], ...
    'h0', [],...
    'Message',[],...
    'epsilon',[],...
    'terminationFlag', false, ...
    'feasibility',0,...
    'leftChild', [], ...
    'rightChild', []);

end
